// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  price       Float
  sku         String   @unique
  stock       Int
  category    String
  status      String   @default("active")
  mainImage   String?  
  hoverImage  String?  
  image1      String?  
  image2      String?  
  image3      String?  
  image4      String?  
  material    String?  
  color       String?  
  gender      String?  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  cartItems    CartItem[]
  wishlistItems WishlistItem[]
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      String   @default("customer")
  createdAt DateTime @default(now())

  cart       Cart?
  wishlist   Wishlist?
}

model Cart {
  id        Int       @id @default(autoincrement())
  userId    Int       @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cartId    Int
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int     @default(1)
  
  @@unique([cartId, productId])
}

model Wishlist {
  id        Int       @id @default(autoincrement())
  userId    Int       @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     WishlistItem[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model WishlistItem {
  id        Int     @id @default(autoincrement())
  wishlistId Int
  wishlist  Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([wishlistId, productId])
}

model Order {
  id          Int      @id @default(autoincrement())
  orderNumber String   @unique
  customerName String
  customerEmail String
  customerPhone String
  customerAddress String
  customerCity String
  customerPostalCode String
  items       Json     // Almacenar array de productos como JSON
  total       Float
  status      String   @default("pending") // pending, paid, shipped, completed, cancelled
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}